<!-- beginn codeownership Jan Pfluger  -->
@model SoPro24Team06.ViewModels.EditAssignmentLimitedViewModel;

<form id="Details" method="post" asp-action="UpdateDetails">
	@Html.AntiForgeryToken()
	@Html.HiddenFor(model => model.Assignment.Id)
	@Html.HiddenFor(model => model.Assignment.Assignee)
	@Html.HiddenFor(model => model.Assignment.Assignee)
	@Html.HiddenFor(model => model.Assignment.Title)
	@Html.HiddenFor(model => model.Assignment.Instructions)
	@Html.HiddenFor(model => model.Assignment.DueDate)
	@Html.HiddenFor(model => model.ProcessTitle)
	@Html.HiddenFor(model => model.Assignment)
	<fieldset>
		<legend>Title</legend>
		<p>@Model.Assignment.Title</p>
	</fieldset>
	<fieldset>
		<legend>Vorgang</legend>
		<p>@Model.ProcessTitle</p>
	</fieldset>
	<fieldset>
		<legend>Fälligkeit</legend>
		<p>@Model.Assignment.DueDate.Date.ToString("dd.MM.yyyy")</p>
	</fieldset>
	<fieldset style="margin-top: 8px">
		<legend>Anweisungen</legend>
		<textarea class="form-control" rows="10" readonly>@Model.Assignment.Instructions</textarea>
	</fieldset>
	<fieldset style="margin-top: 4px">
		<legend>Aufgabenverantwortlichkeit</legend>
		@Html.DropDownListFor(
					model => model.Assignment.AssigneeType,
					Model.AssigneeTypeList,
					new { @id = "assignmentTypeDropdown", @class = "form-control", }
					)
		@Html.ValidationMessageFor(model => model.Assignment.AssigneeType, "", new { @class = "text-danger" })
		<div id="assignedRoleGroup" style="display:none; margin-top:8px;">
			@Html.DropDownListFor(
							model => model.SelectedRoleId,
							Model.RoleList,
							new { @class = "form-control", @id = "assignedRoleDropdown" }
							)
			@Html.ValidationMessageFor(model => model.Assignment.AssignedRole, "", new { @class = "text-danger" })
			<div class="text-danger" id="roleError"></div>
		</div>
		<div id="assigneeGroup" style="display:none; margin-top:8px;">
			@Html.DropDownListFor(
							model => model.SelectedUserId,
							Model.UserList,
							new { @class = "form-control", @id = "assignedUserDropdown" }
							)
			@Html.ValidationMessageFor(model => model.Assignment.Assignee, "", new { @class = "text-danger" })
		</div>
	</fieldset>
	<fieldset style="margin-top: 4px">
		<legend>Status</legend>
		@Html.DropDownListFor(
					model => model.Assignment.Status,
					Model.AssignmentStatusList,
					new { @class = "form-control", @id = "assignmentStatusDropdown" }
					)
		<div class="text-danger" id="statusError"></div>
	</fieldset>
	<div style="margin-top: 12px">
		<button id="submitChanges" type="submit" class="btn btn-primary">Bestätigen</button>
		<a href="/Assignment/OnEditCanceled" type="button" class="btn btn-secondary">Schließen
			ohne
			Speicher</a>
	</div>
</form>

<script>
	document.addEventListener('DOMContentLoaded', function () {
		updateDropdownVisibility();
		document.getElementById('assignmentTypeDropdown').addEventListener('change', updateDropdownVisibility);

		document.getElementById('Details').addEventListener('submit', function (event) {
			if (!validateForm()) {
				event.preventDefault(); // Verhindert das Abschicken des Formulars
			}
		});
	});

	function updateDropdownVisibility() {
		var assignedRoleGroup = document.getElementById('assignedRoleGroup');
		var assigneeGroup = document.getElementById('assigneeGroup');
		var assignmentType = document.getElementById('assignmentTypeDropdown').value;

		if (assignmentType === '@SoPro24Team06.Enums.AssigneeType.ROLES.ToString()') {
			assignedRoleGroup.style.display = 'block';
			assigneeGroup.style.display = 'none';
		} else if (assignmentType === '@SoPro24Team06.Enums.AssigneeType.USER.ToString()') {
			assignedRoleGroup.style.display = 'none';
			assigneeGroup.style.display = 'block';
		} else {
			assignedRoleGroup.style.display = 'none';
			assigneeGroup.style.display = 'none';
		}
	}

	function validateForm() {
		let isValid = true;
		document.getElementById('assigneeTypeError').textContent = '';
		document.getElementById('roleError').textContent = '';
		document.getElementById('userError').textContent = '';
		document.getElementById('statusError').textContent = '';

		const assignmentType = document.getElementById('assignmentTypeDropdown').value;
		if (assignmentType === '') {
			document.getElementById('assigneeTypeError').textContent = 'Bitte wählen Sie eine Aufgabenverantwortlichkeit aus.';
			isValid = false;
		}
		if (assignmentType === '@SoPro24Team06.Enums.AssigneeType.ROLES') {
			const assignedRole = document.getElementById('assignedRoleDropdown').value;
			if (assignedRole === '') {
				document.getElementById('roleError').textContent = 'Bitte wählen Sie eine Rolle aus.';
				isValid = false;
			}
		} else if (assignmentType === '@SoPro24Team06.Enums.AssigneeType.USER') {
			const assignedUser = document.getElementById('assignedUserDropdown').value;
			if (assignedUser === '') {
				document.getElementById('userError').textContent = 'Bitte wählen Sie einen Nutzer aus.';
				isValid = false;
			}
		}
		const assignmentStatus = document.getElementById('assignmentStatusDropdown').value;
		if (assignmentStatus === '') {
			document.getElementById('statusError').textContent = 'Bitte wählen Sie einen Bearbeitungsstatus aus.';
			isValid = false;
		}
		return isValid;
	}
</script>
<!-- end codeownership Jan Pfluger  * -->
