﻿<!------------------------- 
< Author: Tamas Varadi
<------------------------->

@model SoPro24Team06.ViewModels.EditProcessViewModel
@using SoPro24Team06.Helpers;
@{
ViewData["Title"] = "Vorgang starten";

List<ApplicationUser> Users = ViewData["Users"] as List<ApplicationUser>;
List<ProcessTemplate> ProcessTemplates = ViewData["ProcessTemplates"] as List<ProcessTemplate>;
List<AssignmentTemplate> AssignmentTemplates = ViewData["AssignmentTemplates"] as List<AssignmentTemplate>;
List<Contract> Contracts = ViewData["Contracts"] as List<Contract>;
List<Department> Departments = ViewData["Departments"] as List<Department>;
}
@using (Html.BeginForm("Edit", "Process", FormMethod.Post, new { id = "formId" }))
{
    
    
<!-- Start: Titel Select -->
<fieldset style="margin-top: 8px;">
    <input type="hidden" asp-for="Id" value="@Model.Id"/>
    <legend>Titel</legend>
    <input type="text" asp-for="Title" value="@Model.Title" id="Title"/>
</fieldset>
<span asp-validation-for="Title" class="text-danger"></span>
<!-- Ende: Titel Select -->

<!-- Start: Beschreibung Select -->
<fieldset style="margin-top: 8px;">
    <legend>Beschreibung</legend>
    <textarea id="Description" asp-for="Description" class="form-control">@Model.Description</textarea>
    <span asp-validation-for="Description" class="text-danger"></span>
</fieldset>
<!-- Ende: Beschreibung Select -->

<!-- Start: Vorgangsverantwortlicher Select -->
<div class="form-group mt-2">
    <legend>Vorgangsverantwortlicher</legend>
    <select id="supervisorDropdown" asp-for="Supervisor" class="form-control" id="selectedSupervisor" placeholder="Sie">
        @if(Model.Supervisor.FullName == null)
        {
        <option value="" disabled selected>Benutzer wählen</option>
        }
        else
        {
        <option value="" disabled>Benutzer wählen</option>
        }
        @foreach(var user in Users)
        {
        var userDict = @Html.Raw(Json.Serialize(user)).ToString();

        if (Model.Supervisor.FullName == user.FullName)
        {
        <option value="@userDict" selected>@user.FullName</option>
        }
        else
        {
        <option value="@userDict">@user.FullName</option>
        }
        }
    </select>

    <input type="hidden" asp-for="Supervisor.Id" value="@Model.Supervisor.Id" id="SupervisorId"/>
    <input type="hidden" asp-for="Supervisor.FullName" value="@Model.Supervisor.FullName" id="SupervisorName"/>

    <span asp-validation-for="Supervisor.Id" class="text-danger"></span>
    <span asp-validation-for="Supervisor.FullName" class="text-danger"></span>
    <span asp-validation-for="Supervisor" class="text-danger"></span>
</div>
<!-- Ende: Vorgangsverantwortlicher Select -->


<!-- Start: Bezugsperson Select -->
<div class="form-group mt-2">
    <legend>Bezugsperson</legend>
    <select id="workerOfRefDropdown" asp-for="WorkerOfReference" class="form-control" id="selectedWorkerOfRef" placeholder="Benutzer wählen">
        @if (Model.WorkerOfReference.FullName == null)
        {
        <option value="" disabled selected>Benutzer wählen</option>
        }
        else
        {
        <option value="" disabled>Benutzer wählen</option>
        }
        @foreach(var user in Users)
        {
        var userDict = @Html.Raw(Json.Serialize(user)).ToString();

        if (Model.WorkerOfReference.FullName == user.FullName)
        {
        <option value="@userDict" selected>@user.FullName</option>
        }
        else
        {
        <option value="@userDict" >@user.FullName</option>
        }
        }
    </select>

    <input type="hidden" asp-for="WorkerOfReference.Id" value="@Model.WorkerOfReference.Id" id="WorkerOfRefId"/>
    <input type="hidden" name="WorkerOfReference.FullName" value="@Model.WorkerOfReference.FullName" id="WorkerOfRefName"/>

    <span asp-validation-for="WorkerOfReference.FullName" class="text-danger"></span>
    <span asp-validation-for="WorkerOfReference" class="text-danger"></span>

</div>

<!-- Ende: Bezugsperson Select -->

<!-- Start: Vertragstyp Select -->
<div class="form-group mt-2">
    <legend>Vertragstyp</legend>
    <select id="contractDropdown" asp-for="ContractOfRefWorker" class="form-control" id="contractDropdown">

        @if (Model.ContractOfRefWorker.Label == null)
        {
        <option value="" disabled selected>Vertragstyp wählen</option>
        }
        else
        {
        <option value="" disabled>Vertragstyp wählen</option>
        }
        @foreach(var contract in Contracts)
        {
        var contractDict = @Html.Raw(Json.Serialize(contract)).ToString();

        if (Model.ContractOfRefWorker.Label == contract.Label)
        {
        <option value="@contractDict" selected>@contract.Label</option>
        }
        else
        {
        <option value="@contractDict">@contract.Label</option>
        }
        }
    </select>

    <input type="hidden" asp-for="ContractOfRefWorker.Id" value="@Model.ContractOfRefWorker.Id" id="ContractId"/>
    <input type="hidden" asp-for="ContractOfRefWorker.Label" value="@Model.ContractOfRefWorker.Label" id="ContractLabel"/>

    <span asp-validation-for="ContractOfRefWorker.Label" class="text-danger"></span>
    <span asp-validation-for="ContractOfRefWorker" class="text-danger"></span>
</div>
<!-- Ende: Vertragstyp Select -->


<!-- Start: Abteilung Select -->
<div class="form-group mt-2">
    <legend>Abteilung</legend>
    <select id="departmentDropdown" asp-for="DepartmentOfRefWorker" class="form-control" id="departmentDropdown">
        @if (Model.DepartmentOfRefWorker.Name == null) {
        <option value="" disabled selected>Abteilung wählen</option>
        }
        else
        {
        <option value="" disabled>Abteilung wählen</option>
        }

        @foreach(var department in Departments)
        {

        var departmentDict = @Html.Raw(Json.Serialize(department)).ToString();

        if (Model.DepartmentOfRefWorker.Name == department.Name)
        {
        <option value="@departmentDict" selected>@department.Name</option>
        }
        else
        {
        <option value="@departmentDict">@department.Name</option>
        }
        }
    </select>
    <input type="hidden" asp-for="DepartmentOfRefWorker.Id" value="@Model.DepartmentOfRefWorker.Id" id="DepartmentId"/>
    <input type="hidden" asp-for="DepartmentOfRefWorker.Name" value="@Model.DepartmentOfRefWorker.Name" id="DepartmentName"/>
    <span asp-validation-for="DepartmentOfRefWorker.Name" class="text-danger"></span>
    <span asp-validation-for="DepartmentOfRefWorker" class="text-danger"></span>
</div>
<!-- Ende: Abteilung Select -->

<!-- Beginn: Zieldatum Input -->
<fieldset style="margin-top: 8px;">
    <legend>Zieldatum</legend>
    <input class="form-control" type="date" asp-for="DueDate" value="@Model.DueDate.ToString("yyyy-MM-dd")" asp-asp-format="{0:yyyy-MM-dd}" id="DueDate" />
    <span asp-validation-for="DueDate" class="text-danger"></span>
</fieldset>
<!-- Ende: Zieldatum Input -->

<!-- Start: Aufgaben Liste -->

<fieldset style="margin-top: 8px;">
    <legend>Aufgaben</legend>
    <button id="createAssignmentTemplateButton" class="btn" onclick="onCreateAssignmentTemplatePressed()" style="background-color: var(--ash); color: white;">Aufgabe hinzufügen</button>
    <div class="table-responsive">
        <table class="table" id="assignmentTable">
            <thead>
            <tr>
                <th>Titel</th>
                <th>Aufgabenzuständiger</th>
                <th>Art der Aufgabenzuständiger</th>
                <th>Fälligkeit</th>
                <th>Status</th>
                <th>Aktionen</th>
            </tr>
            </thead>
            <tbody id="assignments" name="assignments">
            @if (@Model.Assignments != null && @Model.Assignments.Count > 0)
            {
            var index = 0;
            @foreach (Assignment assignment in @Model.Assignments)
            {
            var title = assignment.Title;
            var assigneeType = EnumHelper.GetDisplayName(assignment.AssigneeType);
            var dueDate = assignment.DueDate;

            <tr class="hoverTableRow" id="assignmentItem" name="" onclick="onEditAssignmentPressed(@assignment.Id)" id="assignmentItem">
                <td>@title</td>
                @if (assignment.AssignedRole != null)
                {
                    <td>@assignment.AssignedRole.Name</td>
                }
                @if (assignment.Assignee != null)
                {
                    <td>@assignment.Assignee.FullName</td>
                }
                @if (assignment.Assignee == null && assignment.AssignedRole == null)
                {
                    <td>Keine Angabe</td>
                }
                <td>@assigneeType</td>
                <td>@dueDate.ToShortDateString()</td>
                <td>@EnumHelper.GetDisplayName(assignment.Status)</td>
                <td class="d-flex flex-row justify-content-evenly">
                    <button class='btn btn-danger' type='button' style='margin-left: 16px;'
                            onclick='removeAssignment(this, @assignment.Id)'>Entfernen</button>
                </td>

                <input type='hidden' name='Assignments[@index].Id' value='@assignment.Id' />
                <input type='hidden' name='Assignments[@index].Title' value='@assignment.Title' />
                <input type='hidden' name='Assignments[@index].Instructions' value='@assignment.Instructions' />

                <input type='hidden' name='Assignments[@index].DueDate' value='@assignment.DueDate' />

                <input type='hidden' name='Assignments[@index].AssigneeType' value='@assignment.AssigneeType' />

                <input type='hidden' name='Assignments[@index].Status' value='@assignment.Status' />

                @if (assignment.AssignedRole != null)
                {
                <input type='hidden' name='Assignments[@index].AssignedRole.Id'
                       value='@assignment.AssignedRole.Id' />
                <input type='hidden' name='Assignments[@index].AssignedRole.Name'
                       value='@assignment.AssignedRole.Name' />
                }

                @if (assignment.ForDepartmentsList != null)
                {
                for (int i = 0; i < assignment.ForDepartmentsList.Count; i++)
                {
                var department = assignment.ForDepartmentsList[i];
                <input type='hidden' name='Assignments[@index].ForDepartmentsList[@i].Id' value='@department.Id' />
                <input type='hidden' name='Assignments[@index].ForDepartmentsList[@i].Name'
                       value='@department.Name' />
                }
                }

                @if (assignment.ForContractsList != null)
                {
                for (int i = 0; i < assignment.ForContractsList.Count; i++)
                {
                var contract = assignment.ForContractsList[i];
                <input type='hidden' name='Assignments[@index].ForContractsList[@i].Id' value='@contract.Id' />
                <input type='hidden' name='Assignments[@index].ForContractsList[@i].Label'
                       value='@contract.Label' />
                }
                }
            </tr>

            index++;
            }

            }
            else
            {
            <tr>
                <td>Keine Aufgabevorlagen vorhanden</td>
            </tr>
            }

            </tbody>
        </table>
    </div>
</fieldset>
<!-- Ende: Aufgaben Liste -->

<div style="margin-top: 36px;">
    <button class="btn" style="background-color: var(--lemming); color: white;">Speichern</button>
</div>

}

@section Scripts {

<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
<partial name="_ValidationScriptsPartial" />

}


<script>

    function onEditAssignmentPressed(assignmentId) {

        var form = document.getElementById("formId")

        //client side validation ignorieren
        if (typeof (form) === 'object' && form != null) {
            form.setAttribute('novalidate', 'novalidate');
        }

        form.action = "/Process/EditRedirectEditAssignment?assignmentId="+assignmentId;
        form.submit();
    }

    function onCreateAssignmentTemplatePressed() {
        var form = document.getElementById("formId")

        //client side validation ignorieren
        if (typeof (form) === 'object' && form != null) {
            form.setAttribute('novalidate', 'novalidate');
        }

        form.action = "/Process/EditRedirectToNewAssignment";
        form.submit();
    }

    window.onload = function () {

        window.assignmentTemplateCount = 0;
        window.assignmentCount = $("#assignmentTable").find("tbody>tr").length;

        if ($('#preselectedTemplate').length) {
            $('#preselectedTemplate').click();
        }

        var supervisorDropdown = document.getElementById("supervisorDropdown");
        supervisorDropdown.addEventListener("change", function () {
            var selectedOption = supervisorDropdown.options[supervisorDropdown.selectedIndex];
            onSupervisorSelected(selectedOption.value);
        });

        var workerOfRefDropdown = document.getElementById("workerOfRefDropdown");
        workerOfRefDropdown.addEventListener("change", function () {
            var selectedOption = workerOfRefDropdown.options[workerOfRefDropdown.selectedIndex];
            onWorkerOfRefSelected(selectedOption.value);
        });

        var contractDropdown = document.getElementById("contractDropdown");
        contractDropdown.addEventListener("change", function () {
            var selectedOption = contractDropdown.options[contractDropdown.selectedIndex];
            onContractSelected(selectedOption.value);
        });

        var departmentDropdown = document.getElementById("departmentDropdown");
        departmentDropdown.addEventListener("change", function () {
            var selectedOption = departmentDropdown.options[departmentDropdown.selectedIndex];
            onDepartmentSelected(selectedOption.value);
        });
    }

    function onContractSelected(contract_string) {
        var contract = JSON.parse(contract_string);
        $('#ContractId').val(contract.id);
        $('#ContractLabel').val(contract.label)
    }

    function onDepartmentSelected(department_string) {
        var department = JSON.parse(department_string);
        $('#DepartmentId').val(department.id);
        $('#DepartmentName').val(department.name)
    }


    function onSupervisorSelected(supervisor_string)
    {
        var supervisor = JSON.parse(supervisor_string);
        $('#SupervisorId').val(supervisor.id);
        $('#SupervisorName').val(supervisor.fullName)
    }

    function onWorkerOfRefSelected(workerOfRef_string)
    {
        var workerOfRef = JSON.parse(workerOfRef_string);
        $('#WorkerOfRefId').val(workerOfRef.id);
        $('#WorkerOfRefName').val(workerOfRef.fullName)

    }

    function removeAssignment(obj, assignmentId) {
        event.stopPropagation();
        obj.closest('tr').remove();
        window.assignmentCount--;

        if (!$('#assignmentItem').length) {
            $('#assignments').html("<tr><td>Keine Aufgabevorlagen vorhanden</td></tr>");
        } else {

            var rows = $("#assignmentTable").find("tbody>tr");

            for (var i = 0; i < rows.length; i++) {

                var pattern = /Assignments\[\d+\]/g;
                let text = rows[i].innerHTML.replace(pattern, 'Assignments[' + i + ']');
                rows[i].innerHTML = text;
            }
        }
    }

</script>