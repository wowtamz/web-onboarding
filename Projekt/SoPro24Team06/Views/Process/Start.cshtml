﻿<!------------------------- 
< Author: Tamas Varadi
<------------------------->

@model SoPro24Team06.ViewModels.StartProcessViewModel
@using SoPro24Team06.Helpers;
@{
ViewData["Title"] = "Vorgang starten";

List<ApplicationUser> Users = ViewData["Users"] as List<ApplicationUser>;
List<ProcessTemplate> ProcessTemplates = ViewData["ProcessTemplates"] as List<ProcessTemplate>;
List<AssignmentTemplate> AssignmentTemplates = ViewData["AssignmentTemplates"] as List<AssignmentTemplate>;
List<Contract> Contracts = ViewData["Contracts"] as List<Contract>;
List<Department> Departments = ViewData["Departments"] as List<Department>;
}
@using (Html.BeginForm("Start", "Process", FormMethod.Post, new { id = "formId" }))
{

<!-- Start: Prozess Select -->
<div class="form-group mt-2">
    <legend>Prozess</legend>

    @if(@Model.Template != null && @Model.Template.Id > 0) {

    <input class="form-control" value="@Model.Template.Title" readonly/>
    <input type="hidden" asp-for="Template.Id" value="@Model.Template.Id" id="TemplateId"/>
    <input type="hidden" asp-for="Template.Title" value="@Model.Template.Title" id="TemplateTitle"/>
    <input type="hidden" asp-for="Template.Description" value="@Model.Template.Description" id="TemplateDescription"/>

    var processTemplateDict = @Html.Raw(Json.Serialize(@Model.Template)).ToString();

    <input type="hidden" id="preselectedTemplate" onclick="onProcessTemplateSelected('@processTemplateDict')"/>
    }
    else
    {
    <select id="processTemplateDropdown" asp-for="Template" class="form-control" id="selectedSupervisor" placeholder="Sie">
        <option value="" disabled selected>Vorlage wählen</option>
        @if (ProcessTemplates != null)
        {
        @foreach(var template in ProcessTemplates)
        {
        var processTemplateDict = @Html.Raw(Json.Serialize(template)).ToString();
        <option value="@processTemplateDict" >@template.Title</option>
        }
        }

    </select>

    <input type="hidden" asp-for="Template.Id" value="" id="TemplateId"/>
    <input type="hidden" asp-for="Template.Title" value="" id="TemplateTitle"/>
    <input type="hidden" asp-for="Template.Description" value="" id="TemplateDescription"/>
    }

    <span asp-validation-for="Template" class="text-danger"></span>

    <div id="TemplateRolesWithAcess">
        @if (@Model.Template != null && @Model.Template.RolesWithAccess != null)
        {
        @for(int i = 0; i < @Model.Template.RolesWithAccess.Count; i++)
        {
        var role = @Model.Template.RolesWithAccess[i];
        <input type="hidden" asp-for="Template.RolesWithAccess[@i]" value="@role.Name" id="RoleWithAccess@i"/>
        }
        }
    </div>

</div>
<!-- Ende: Prozess Select -->

<!-- Start: Titel Select -->
<fieldset style="margin-top: 8px;">
    <legend>Titel</legend>
    <input type="text" asp-for="Title" value="@Model.Title" id="Title"/>
</fieldset>
<span asp-validation-for="Title" class="text-danger"></span>
<!-- Ende: Titel Select -->

<!-- Start: Beschreibung Select -->
<fieldset style="margin-top: 8px;">
    <legend>Beschreibung</legend>
    <textarea id="Description" asp-for="Description" class="form-control">@Model.Description</textarea>
    <span asp-validation-for="Description" class="text-danger"></span>
</fieldset>
<!-- Ende: Beschreibung Select -->

<!-- Start: Vorgangsverantwortlicher Select -->
<div class="form-group mt-2">
    <legend>Vorgangsverantwortlicher</legend>
    <select id="supervisorDropdown" asp-for="Supervisor" class="form-control" id="selectedSupervisor" placeholder="Sie">
        @if(Model.Supervisor.FullName == null)
        {
        <option value="" disabled selected>Benutzer wählen</option>
        }
        else
        {
        <option value="" disabled>Benutzer wählen</option>
        }
        @foreach(var user in Users)
        {
        var userDict = @Html.Raw(Json.Serialize(user)).ToString();

        if (Model.Supervisor.FullName == user.FullName)
        {
        <option value="@userDict" selected>@user.FullName</option>
        }
        else
        {
        <option value="@userDict">@user.FullName</option>
        }
        }
    </select>

    <input type="hidden" asp-for="Supervisor.Id" value="@Model.Supervisor.Id" id="SupervisorId"/>
    <input type="hidden" asp-for="Supervisor.FullName" value="@Model.Supervisor.FullName" id="SupervisorName"/>

    <span asp-validation-for="Supervisor.Id" class="text-danger"></span>
    <span asp-validation-for="Supervisor.FullName" class="text-danger"></span>
    <span asp-validation-for="Supervisor" class="text-danger"></span>
</div>
<!-- Ende: Vorgangsverantwortlicher Select -->


<!-- Start: Bezugsperson Select -->
<div class="form-group mt-2">
    <legend>Bezugsperson</legend>
    <select id="workerOfRefDropdown" asp-for="WorkerOfReference" class="form-control" id="selectedWorkerOfRef" placeholder="Benutzer wählen">
        @if (Model.WorkerOfReference.FullName == null)
        {
        <option value="" disabled selected>Benutzer wählen</option>
        }
        else
        {
        <option value="" disabled>Benutzer wählen</option>
        }
        @foreach(var user in Users)
        {
        var userDict = @Html.Raw(Json.Serialize(user)).ToString();

        if (Model.WorkerOfReference.FullName == user.FullName)
        {
        <option value="@userDict" selected>@user.FullName</option>
        }
        else
        {
        <option value="@userDict" >@user.FullName</option>
        }
        }
    </select>

    <input type="hidden" asp-for="WorkerOfReference.Id" value="@Model.WorkerOfReference.Id" id="WorkerOfRefId"/>
    <input type="hidden" name="WorkerOfReference.FullName" value="@Model.WorkerOfReference.FullName" id="WorkerOfRefName"/>

    <span asp-validation-for="WorkerOfReference.FullName" class="text-danger"></span>
    <span asp-validation-for="WorkerOfReference" class="text-danger"></span>

</div>

<!-- Ende: Bezugsperson Select -->

<!-- Start: Vertragstyp Select -->
<div class="form-group mt-2">
    <legend>Vertragstyp</legend>
    <select id="contractDropdown" asp-for="ContractOfRefWorker" class="form-control" id="selectedContract">

        @if (Model.ContractOfRefWorker.Label == null)
        {
        <option value="" disabled selected>Vertragstyp wählen</option>
        }
        else
        {
        <option value="" disabled>Vertragstyp wählen</option>
        }
        @foreach(var contract in Contracts)
        {
        var contractDict = @Html.Raw(Json.Serialize(contract)).ToString();

        if (Model.ContractOfRefWorker.Label == contract.Label)
        {
        <option value="@contractDict" selected>@contract.Label</option>
        }
        else
        {
        <option value="@contractDict">@contract.Label</option>
        }
        }
    </select>

    <input type="hidden" asp-for="ContractOfRefWorker.Id" value="@Model.ContractOfRefWorker.Id" id="ContractId"/>
    <input type="hidden" asp-for="ContractOfRefWorker.Label" value="@Model.ContractOfRefWorker.Label" id="ContractLabel"/>

    <span asp-validation-for="ContractOfRefWorker.Label" class="text-danger"></span>
    <span asp-validation-for="ContractOfRefWorker" class="text-danger"></span>
</div>
<!-- Ende: Vertragstyp Select -->


<!-- Start: Abteilung Select -->
<div class="form-group mt-2">
    <legend>Abteilung</legend>
    <select id="departmentDropdown" asp-for="DepartmentOfRefWorker" class="form-control" id="selectedDepartment">
        @if (Model.DepartmentOfRefWorker.Name == null) {
        <option value="" disabled selected>Abteilung wählen</option>
        }
        else
        {
        <option value="" disabled>Abteilung wählen</option>
        }

        @foreach(var department in Departments)
        {

        var departmentDict = @Html.Raw(Json.Serialize(department)).ToString();

        if (Model.DepartmentOfRefWorker.Name == department.Name)
        {
        <option value="@departmentDict" selected>@department.Name</option>
        }
        else
        {
        <option value="@departmentDict">@department.Name</option>
        }
        }
    </select>
    <input type="hidden" asp-for="DepartmentOfRefWorker.Id" value="@Model.DepartmentOfRefWorker.Id" id="DepartmentId"/>
    <input type="hidden" asp-for="DepartmentOfRefWorker.Name" value="@Model.DepartmentOfRefWorker.Name" id="DepartmentName"/>
    <span asp-validation-for="DepartmentOfRefWorker.Name" class="text-danger"></span>
    <span asp-validation-for="DepartmentOfRefWorker" class="text-danger"></span>
</div>
<!-- Ende: Abteilung Select -->

<!-- Start: Aufgaben -->
<div class="form-group mt-2">
    <legend>Aufgaben</legend>
    <button id="createAssignmentTemplateButton" class="btn" onclick="onCreateAssignmentTemplatePressed()" style="background-color: var(--ash); color: white;">Aufgabe hinzufügen</button>
</div>
<!-- Ende: Aufgaben Select -->

<!-- Start: Aufgaben Liste -->
<fieldset style="margin-top: 8px;">
    <div class="table-responsive">
        <table class="table" id="assignmentTemplateTable">
            <thead>
            <tr>
                <th>Titel</th>
                <th>Anleitung</th>
                <th>Aufgabenzuständiger</th>
                <th>Vertragsart</th>
                <th>Abteilung</th>
                <th>Fälligkeit</th>
                <th>Aktionen</th>
            </tr>
            </thead>
            <tbody id="assignments" name="assignments">
            @if(@Model.AssignmentTemplates != null && @Model.AssignmentTemplates.Count > 0)
            {
                @for(int j = 0; j < @Model.AssignmentTemplates.Count; j++)
                {
                var template = @Model.AssignmentTemplates[j];
                var title = @Model.AssignmentTemplates[j].Title;
                var description = @Model.AssignmentTemplates[j].Instructions;
                var assignee = @Model.AssignmentTemplates[j].AssigneeType;
                var due_in = @Model.AssignmentTemplates[j].DueIn;

                var tr_name = $"templateItem{template.Id}";

                <tr class="hoverTableRow" id="templateItem" name="@tr_name" onclick="onEditAssignmentTemplatePressed(@template.Id)">
                    <td>@template.Title</td>
                    <td><a href="#">Mehr anzeigen</a></td>
                    <td>@EnumHelper.GetDisplayName(template.AssigneeType)</td>
                    <td>Vollzeit</td>
                    <td>Personal</td>
                    <td>@due_in.Label</td>
                    <td class="d-flex flex-row justify-content-evenly">
                        <button class='btn btn-danger' type='button' style='margin-left: 16px;' onclick='removeAssignmentTemplate(this, @template.Id)'>Entfernen</button>
                    </td>

                    <input type='hidden' name='AssignmentTemplates[@j].Id' value='@template.Id' />
                    <input type='hidden' name='AssignmentTemplates[@j].Title' value='@template.Title' />
                    <input type='hidden' name='AssignmentTemplates[@j].Instructions' value='@template.Instructions' />

                    <input type='hidden' name='AssignmentTemplates[@j].DueIn.Id' value='@template.DueIn.Id' />
                    <input type='hidden' name='AssignmentTemplates[@j].DueIn.Label' value='@template.DueIn.Label' />
                    <input type='hidden' name='AssignmentTemplates[@j].DueIn.Days' value='@template.DueIn.Days' />
                    <input type='hidden' name='AssignmentTemplates[@j].DueIn.Weeks' value='@template.DueIn.Weeks' />
                    <input type='hidden' name='AssignmentTemplates[@j].DueIn.Months' value='@template.DueIn.Months' />

                    <input type='hidden' name='AssignmentTemplates[@j].AssigneeType' value='@template.AssigneeType' />

                    @if (template.AssignedRole != null)
                    {
                    <input type='hidden' name='AssignmentTemplates[@j].AssignedRole.Id' value='@template.AssignedRole.Id' />
                    <input type='hidden' name='AssignmentTemplates[@j].AssignedRole.Name' value='@template.AssignedRole.Name' />
                    }

                    @if (template.ForDepartmentsList != null)
                    {
                    for(int i = 0; i < template.ForDepartmentsList.Count; i++)
                    {
                    var department = template.ForDepartmentsList[i];
                    <input type='hidden' name='AssignmentTemplates[@j].ForDepartmentsList[@i].Id' value='@department.Id' />
                    <input type='hidden' name='AssignmentTemplates[@j].ForDepartmentsList[@i].Name' value='@department.Name' />
                    }
                    }

                    @if (template.ForContractsList != null)
                    {
                    for(int i = 0; i < template.ForContractsList.Count; i++)
                    {
                    var contract = template.ForContractsList[i];
                    <input type='hidden' name='AssignmentTemplates[@j].ForContractsList[@i].Id' value='@contract.Id' />
                    <input type='hidden' name='AssignmentTemplates[@j].ForContractsList[@i].Label' value='@contract.Label' />
                    }
                    }
                </tr>
                }
            }
            else
            {
            <tr>
                <td>Keine Aufgabevorlagen vorhanden</td>
            </tr>
            }

            </tbody>
        </table>
    </div>
</fieldset>
<!-- Ende: Aufgaben Liste -->

<div style="margin-top: 36px;">
    <button class="btn" style="background-color: var(--lemming); color: white;">Starten</button>
</div>

}

<!-- <script src="assets/bootstrap/js/bootstrap.min.js"></script> -->

@section Scripts {

<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
<partial name="_ValidationScriptsPartial" />

}


<script>

    function test() {
        console.log("TEST");
    }
    
    function onEditAssignmentTemplatePressed(assignmentTemplateId) {

        var form = document.getElementById("formId")

        //client side validation ignorieren
        if (typeof (form) === 'object' && form != null) {
            form.setAttribute('novalidate', 'novalidate');
        }

        form.action = "/Process/StartRedirectEditAssignment?assignmentTemplateId="+assignmentTemplateId;
        form.submit();
    }
    
    function onCreateAssignmentTemplatePressed() {
        var form = document.getElementById("formId")

        //client side validation ignorieren
        if (typeof (form) === 'object' && form != null) {
            form.setAttribute('novalidate', 'novalidate');
        }

        form.action = "/Process/StartRedirectToNewAssignment";
        form.submit();
    }

    window.onload = function() {

        window.assignmentTemplateCount = 0;

        if ($('#preselectedTemplate').length) {
            $('#preselectedTemplate').click();
        }

        var processTemplateDropdown = document.getElementById("processTemplateDropdown");

        if (processTemplateDropdown) {
            processTemplateDropdown.addEventListener("change", function () {
                var selectedOption = processTemplateDropdown.options[processTemplateDropdown.selectedIndex];
                onProcessTemplateSelected(selectedOption.value);
            });
        }

        var supervisorDropdown = document.getElementById("supervisorDropdown");
        supervisorDropdown.addEventListener("change", function () {
            var selectedOption = supervisorDropdown.options[supervisorDropdown.selectedIndex];
            onSupervisorSelected(selectedOption.value);
        });

        var workerOfRefDropdown = document.getElementById("workerOfRefDropdown");
        workerOfRefDropdown.addEventListener("change", function () {
            var selectedOption = workerOfRefDropdown.options[workerOfRefDropdown.selectedIndex];
            onWorkerOfRefSelected(selectedOption.value);
        });

        var contractDropdown = document.getElementById("contractDropdown");
        contractDropdown.addEventListener("change", function () {
            var selectedOption = contractDropdown.options[contractDropdown.selectedIndex];
            onContractSelected(selectedOption.value);
        });

        var departmentDropdown = document.getElementById("departmentDropdown");
        departmentDropdown.addEventListener("change", function () {
            var selectedOption = departmentDropdown.options[departmentDropdown.selectedIndex];
            onDepartmentSelected(selectedOption.value);
        });
        
        /*
        var createAssignmentTemplateButton = document.getElementById("createAssignmentTemplateButton");
        createAssignmentTemplateButton.addEventListener("click", function () {
            var form = document.getElementById("formId")
            
            //client side validation ignorieren
            if (typeof (form) === 'object' && form != null) {
                form.setAttribute('novalidate', 'novalidate');
            }
            
            form.action = "/Process/StartRedirectToNewAssignment";
            form.submit();
        });
        */

    }

    function onProcessTemplateSelected(temp_string) {

        template = JSON.parse(temp_string);
        
        if (typeof $('#Title').val() === "undefined" || $('#Title').val() === "") {
            $('#Title').val(template.title);
        }
        
        $('#Description').val(template.description);

        if (template.contractOfRefWorker.id > 0) {
            onContractSelected(template.contractOfRefWorker.id, template.contractOfRefWorker.label)
        }
        if (template.departmentOfRefWorker.id > 0) {
            onDepartmentSelected(template.departmentOfRefWorker.id, template.departmentOfRefWorker.name)
        }


        $('#TemplateId').val(template.id);
        $('#TemplateTitle').val(template.title);
        $('#TemplateDescription').val(template.description);
        $('#TemplateAssignmentTemplates').val(template.id);

        $('#TemplateContractId').val(template.contractOfRefWorker.id);
        $('#TemplateContractLabel').val(template.contractOfRefWorker.label);
        $('#TemplateDepartmentId').val(template.departmentOfRefWorker.id);
        $('#TemplateDepartmentName').val(template.departmentOfRefWorker.name);

        var assignmentTemplates = template.assignmentTemplates;

        for (var i = 0; i < assignmentTemplates.length; i++) {

            var assignmentTemplate_string = JSON.stringify(assignmentTemplates[i]);

            onAssignmentTemplateSelected(assignmentTemplate_string);
        }
    }

    function onAssignmentTemplateSelected(temp_string) {

        var template = JSON.parse(temp_string);

        console.log(template);

        document.getElementById("assignmentTemplateDropdown").selectedIndex = "0";

        var dueInDict = template.dueIn;
        var departmentArray = template.forDepartments;
        var contractArray = template.forContracts;
        var roleDict = template.assignedRole;

        const assignmentTemplate = {
            id: template.id,
            title: template.title,
            instructions: template.instructions,
            dueIn: dueInDict,
            forDepartmentsList: departmentArray,
            forContractsList: contractArray,
            assigneeType: template.assigneeType,
            assignedRole: roleDict

        };

        $.ajax({
            url: '@Url.Action("AddAssignmentTemplate", "Process")?index=' + window.assignmentTemplateCount++,
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(assignmentTemplate),
            success: function(result) {
                let html = JSON.parse(JSON.stringify(result)).html;

                let obj = $('tr[name="templateItem'+ template.id +'"]')

                if (obj.length) {
                    alert('Die Aufgabe "' + template.title + '" wurde bereits hinzugefügt');
                } else {
                    if ($('#templateItem').length) {
                        $('#assignments').append(html);
                    } else {
                        $('#assignments').html(html);
                    }
                }
            },
            error: function (xhr, status, error) {
                console.error("Error applying Assignment Template: " + error);
            }
        });
    }

    function onContractSelected(contract_string) {
        var contract = JSON.parse(contract_string);
        $('#ContractId').val(contract.id);
        $('#ContractLabel').val(contract.label)
    }

    function onDepartmentSelected(department_string) {
        var department = JSON.parse(department_string);
        $('#DepartmentId').val(department.id);
        $('#DepartmentName').val(department.name)
    }


    function onSupervisorSelected(supervisor_string)
    {
        var supervisor = JSON.parse(supervisor_string);
        $('#SupervisorId').val(supervisor.id);
        $('#SupervisorName').val(supervisor.fullName)
    }

    function onWorkerOfRefSelected(workerOfRef_string)
    {
        var workerOfRef = JSON.parse(workerOfRef_string);
        $('#WorkerOfRefId').val(workerOfRef.id);
        $('#WorkerOfRefName').val(workerOfRef.fullName)
        //$('#WorkerOfRefStr').val(workerOfRef.name)

    }

    function removeAssignmentTemplate(obj, assignmentId) {
        event.stopPropagation();
        obj.closest('tr').remove();
        window.assignmentTemplateCount--;

        if (!$('#templateItem').length) {
            $('#assignments').html("<tr><td>Keine Aufgabevorlagen vorhanden</td></tr>");
        } else {

            var rows = $("#assignmentTemplateTable").find("tbody>tr");

            for (var i = 0; i < rows.length; i++) {

                var pattern = /AssignmentTemplates\[\d+\]/g;
                let text = rows[i].innerHTML.replace(pattern, 'AssignmentTemplates[' + i +']');
                rows[i].innerHTML = text;
            }
        }
    }


</script>