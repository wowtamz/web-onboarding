//begin codeownership Jan Pfluger
using System.Linq;
using System.Text.RegularExpressions;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using SoPro24Team06.Container;
using SoPro24Team06.Containers;
using SoPro24Team06.Data;
using SoPro24Team06.Enums;
using SoPro24Team06.Helpers;
using SoPro24Team06.Models;
using SoPro24Team06.ViewModels;

namespace SoPro24Team06.Controllers
{
    [Authorize]
    public class AssignmentController : Controller
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly RoleManager<ApplicationRole> _roleManager;
        private readonly ILogger<AssignmentTemplateController> _logger;
        private readonly ApplicationDbContext _context;
        private readonly ProcessContainer _processContainer;
        private readonly AssingmentContainer _assignmentContainer;

        public AssignmentController(
            UserManager<ApplicationUser> userManager,
            RoleManager<ApplicationRole> roleManager,
            ILogger<AssignmentTemplateController> logger,
            ApplicationDbContext context
        )
        {
            _userManager = userManager;
            _roleManager = roleManager;
            _logger = logger;
            _context = context;
            _processContainer = new ProcessContainer(_context);
            _assignmentContainer = new AssingmentContainer(_context);
        }

        /// <summary>
        /// Outputs the Assignment Index View to the User
        /// </summary>
        /// <returns></returns>
        public async Task<IActionResult> Index()
        {
            AssignmentIndexViewModel model = await GetAssignmentIndexViewModelAsync();

            int? selectedProcessId = HttpContext.Session.GetInt32("selectedProcessId");
            if (selectedProcessId.HasValue)
            {
                ViewData["selectedProcessId"] = selectedProcessId.Value;
            }

            string? currentList = HttpContext.Session.GetString("currentList");
            if (currentList != null)
            {
                ViewData["currentList"] = currentList;
            }

            string? sortingMethod = HttpContext.Session.GetString("sortingMethod");
            {
                ViewData["sortingMethod"] = sortingMethod;
            }
            return View("~/Views/Assignments/Index.cshtml", model);
        }

        /// <summary>
        /// Function is called by from EditAssignmentViewModel
        /// Saves changed made by the user to Assignment to database if possible
        /// </summary>
        /// <param name="model">AssignmentEditViewModel generated by Form in the EditAssignmentView </param>
        /// <returns>NotFound, EditAssignment View, AssignmentIndex View</returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> EditAssignment([FromForm] AssignmentEditViewModel model)
        {
            // check if model is Valid but still contains errors
            if (ModelState.IsValid)
            {
                //check if model contains an Assignment
                if (model.Assignment == null)
                {
                    return NotFound("Assignment could not be found");
                }
                //checks if Assignment has valid Title
                if (string.IsNullOrWhiteSpace(model.Assignment.Title))
                {
                    ModelState.AddModelError("Assignment.Title", "Bitte legen Sie eine Titel fest");
                    _logger.LogCritical("EditAssignment Title Error");
                }
                //checks if AssingeeTyp, AssignedRole and Assigee con be set correctly
                if (model.Assignment.AssigneeType == AssigneeType.ROLES)
                {
                    //checks if a Valid ApplicationRole can be generated from Database
                    if (model.SelectedRoleId == null)
                    {
                        ModelState.AddModelError(
                            "Assignment.AssignedRole",
                            "Bitte wählen Sie eine Rolle aus"
                        );
                        _logger.LogCritical("EditAssignment Role Error");
                    }
                    else if (await _roleManager.FindByIdAsync(model.SelectedRoleId) == null)
                    {
                        ModelState.AddModelError(
                            "Assignment.AssignedRole",
                            "Bitte wählen Sie eine Rolle aus"
                        );
                        _logger.LogInformation("EditAssignment Role Error");
                    }
                }
                else if (model.Assignment.AssigneeType == AssigneeType.USER)
                {
                    //checks if a Valid ApplicationRole can be generated from Database
                    if (model.SelectedUserId == null)
                    {
                        ModelState.AddModelError(
                            "Assignment.Assingee",
                            "Bitte wählen Sie einen Nutzer aus"
                        );
                        _logger.LogInformation("EditAssignment User Error");
                    }
                    else if (await _userManager.FindByIdAsync(model.SelectedUserId) == null)
                    {
                        ModelState.AddModelError(
                            "Assignment.Assingee",
                            "Bitte wählen Sie einen Nutzer aus"
                        );
                        _logger.LogInformation("EditAssignment User Error");
                    }
                }
                else
                {
                    ModelState.AddModelError(
                        "Assignment.AssigneeType",
                        "Bitte wählen Sie eine Zuständigkeitsart"
                    );
                    _logger.LogInformation("EditAssignment AssigneeType Error");
                }
                //checks if Status is set
                if (model.Assignment.Status == null)
                {
                    ModelState.AddModelError(
                        "Assignment.Status",
                        "Bitte wählen sie einen Bearbeitungszustand aus"
                    );
                    _logger.LogInformation("EditAssignment Status Error");
                }
                //checks if DueDate is set
                if (model.Assignment.DueDate == null)
                {
                    ModelState.AddModelError(
                        "Assignment.DueDate",
                        "Bitte wählen sie ein Fälligkeitsdatum aus"
                    );
                    _logger.LogInformation("EditAssignment DueDate Error");
                }
            }

            // if Model State is InValid, reinitialize all properties of model where necessary and return to view
            if (!ModelState.IsValid)
            {
                // foreach (var modelStateEntry in ModelState.Values)
                // {
                //     foreach (var error in modelStateEntry.Errors)
                //     {
                //         var errorMessage = error.ErrorMessage;
                //         var exception = error.Exception;
                //     }
                // }
                // return BadRequest(ModelState);

                //checks if Model Stat is Invalid because of missing assignment, if yes show NotFoundError
                if (model.Assignment == null)
                    return NotFound("Error: Assignment not found");
                //get Process which contains assignment
                List<Process> processList = await _processContainer.GetProcessesAsync();
                Process? process = processList.FirstOrDefault(p =>
                    p.Assignments.Contains(model.Assignment)
                );
                //get List of all Users which are not locked
                List<ApplicationUser> userList = _userManager.Users.ToList();

                foreach (ApplicationUser u in userList)
                {
                    if (await _userManager.IsLockedOutAsync(u))
                        userList.Remove(u);
                }
                //get List of all Roles
                List<ApplicationRole> roleList = _roleManager.Roles.ToList();
                //initializing Lists from model
                model.InitialiseSelectLists(userList, roleList);
                //return View
                return View("~/Views/Assignments/EditAssignment.cshtml", model);
            }

            //check if the correct assignment can be found in Database
            Assignment? assignment = _assignmentContainer.GetAssignmentById(model.Assignment.Id);
            if (assignment == null)
            {
                return NotFound("Error: Assignment not found");
            }
            //set Values selected by user
            assignment.Title = model.Assignment.Title;
            assignment.Instructions = model.Assignment.Instructions;
            assignment.AssigneeType = model.Assignment.AssigneeType;
            assignment.Status = model.Assignment.Status;
            assignment.DueDate = model.Assignment.DueDate;
            //get new value for Assignee and AssignedRole
            ApplicationUser? selectedUser = await _userManager.FindByIdAsync(model.SelectedUserId);
            ApplicationRole? selectedRole = await _roleManager.FindByIdAsync(model.SelectedRoleId);
            //make sure to only set one Assignee or AssignedRole
            if (assignment.AssigneeType == AssigneeType.ROLES)
            {
                assignment.AssignedRole = selectedRole;
                _context.Assignments.Update(assignment);
                _context.Entry(assignment).Reference(a => a.Assignee).CurrentValue = null;
            }
            if (assignment.AssigneeType == AssigneeType.USER)
            {
                assignment.Assignee = selectedUser;
                _context.Assignments.Update(assignment);
                _context.Entry(assignment).Reference(a => a.AssignedRole).CurrentValue = null;
            }
            //save changes in database
            await _context.SaveChangesAsync();

            return RedirectToAction("Index");
        }

        /// <summary>
        /// Function is called by from EditAssignmentViewModel
        /// Saves changed made by the user to Assignment to database if possible
        /// </summary>
        /// <param name="model">EditAssignmentLimitedViewModel generated from form out of EditAssignmentLimited View</param>
        /// <returns>NotFound, EditAssignmentLimited View, AssignmentIndex View</returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> UpdateDetails(
            [FromForm] EditAssignmentLimitedViewModel model
        )
        {
            // checks if even if model is Valid if it still contains errors
            if (ModelState.IsValid)
            {
                // checks if AssigneeType, Assignee and AssignedRoles can be set correctly
                if (model.Assignment.AssigneeType == AssigneeType.ROLES)
                {
                    if (model.SelectedRoleId == null)
                    {
                        ModelState.AddModelError(
                            "Assignment.AssignedRole",
                            "Bitte wählen Sie eine Rolle aus 1"
                        );
                    }
                    else if (await _roleManager.FindByIdAsync(model.SelectedRoleId) == null)
                    {
                        ModelState.AddModelError(
                            "Assignment.AssignedRole",
                            "Bitte wählen Sie eine Rolle aus 2"
                        );
                    }
                }
                else if (model.Assignment.AssigneeType == AssigneeType.USER)
                {
                    if (model.SelectedUserId == null)
                    {
                        ModelState.AddModelError(
                            "Assignment.Assingee",
                            "Bitte wählen Sie einen Nutzer aus. 1"
                        );
                    }
                    else if (await _userManager.FindByIdAsync(model.SelectedUserId) == null)
                    {
                        ModelState.AddModelError(
                            "Assignment.Assingee",
                            "Bitte wählen Sie einen Nutzer aus. 2"
                        );
                    }
                }
                else
                {
                    ModelState.AddModelError(
                        "Assignment.AssigneeType",
                        "Bitte wählen Sie eine Zuständigkeitsart"
                    );
                }
                //checks if Assignment Status is set
                if (model.Assignment.Status == null)
                {
                    ModelState.AddModelError(
                        "Assignment.Status",
                        "Bitte wählen sie einen Bearbeitungszustand aus"
                    );
                }
            }

            // if Model State is InValid, reinitialize all properties of model where necessary and return to view
            if (ModelState.IsValid == false)
            {
                // foreach (var modelStateEntry in ModelState.Values)
                // {
                // 	foreach (var error in modelStateEntry.Errors)
                // 	{
                // 		var errorMessage = error.ErrorMessage;
                // 		var exception = error.Exception;
                // 	}
                // }
                // return BadRequest(ModelState);
                //check if Assignment contains Error because of missing Assignment and return NotFound if true
                if (model.Assignment == null)
                    return NotFound("Error: Assignment not found");
                //get process which contains Assignment
                List<Process> processList = await _processContainer.GetProcessesAsync();
                Process? process = processList.FirstOrDefault(p =>
                    p.Assignments.Contains(model.Assignment)
                );
                //get List of all Users which are not LockedOut
                List<ApplicationUser> userList = _userManager.Users.ToList();

                foreach (ApplicationUser u in userList)
                {
                    if (await _userManager.IsLockedOutAsync(u))
                        userList.Remove(u);
                }
                //get list of all Roles
                List<ApplicationRole> roleList = _roleManager.Roles.ToList();
                //reinitialize Lists
                model.InitialiseSelectList(userList, roleList);
                //return View
                return View("~/Views/Assignments/EditAssignmentLimited.cshtml", model);
            }
            //check if Assignment can be found in database if not return not found
            Assignment? assignment = await _context.Assignments.FirstOrDefaultAsync(a =>
                a.Id == model.Assignment.Id
            );
            if (assignment == null)
            {
                return NotFound();
            }
            //get SelectedUser and SelectedRole from Database
            ApplicationUser? selectedUser = await _userManager.FindByIdAsync(model.SelectedUserId);
            ApplicationRole? selectedRole = await _roleManager.FindByIdAsync(model.SelectedRoleId);
            //set changes to assignment
            assignment.Status = model.Assignment.Status;
            assignment.AssigneeType = model.Assignment.AssigneeType;
            //set changes for AssingeeType, AssignedRole and Assignee
            if (assignment.AssigneeType == AssigneeType.ROLES)
            {
                _logger.LogInformation("AssingeeType == ROLES" + assignment.AssigneeType);
                assignment.AssignedRole = selectedRole;
                _context.Assignments.Update(assignment);
                _context.Entry(assignment).Reference(a => a.Assignee).CurrentValue = null;
            }
            if (assignment.AssigneeType == AssigneeType.USER)
            {
                assignment.Assignee = selectedUser;
                _context.Assignments.Update(assignment);
                _context.Entry(assignment).Reference(a => a.AssignedRole).CurrentValue = null;
            }
            //save changes to database
            await _context.SaveChangesAsync();
            //return to Index
            return RedirectToAction("Index");
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="assignmentId"></param>
        /// <returns></returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Edit(int assignmentId)
        {
            Assignment? assignment = _assignmentContainer.GetAssignmentById(assignmentId);
            if (assignment == null)
            {
                return NotFound("Eror: Selected Assignment Not Found");
            }
            List<Process> processList = await _processContainer.GetActiveProcessesAsync();
            Process? process = processList.FirstOrDefault(p =>
                p.Assignments != null && p.Assignments.Contains(assignment)
            );
            List<ApplicationUser> userList = _userManager.Users.ToList();
            foreach (ApplicationUser u in userList)
            {
                if (await _userManager.IsLockedOutAsync(u))
                    userList.Remove(u);
            }
            List<ApplicationRole> roleList = _roleManager.Roles.ToList();
            ApplicationUser user = await _userManager.GetUserAsync(HttpContext.User);
            List<string> roles = new List<string>(await _userManager.GetRolesAsync(user));
            if (roles.Contains("Administrator") || (process != null && process.Supervisor == user))
            {
                AssignmentEditViewModel model = new AssignmentEditViewModel(
                    assignment,
                    userList,
                    roleList,
                    process
                );
                return View("~/Views/Assignments/EditAssignment.cshtml", model);
            }
            else
            {
                EditAssignmentLimitedViewModel model = new EditAssignmentLimitedViewModel(
                    assignment,
                    userList,
                    roleList,
                    process
                );
                return View("~/Views/Assignments/EditAssignmentLimited.cshtml", model);
            }
        }

        /// <summary>
        /// Opens Detail Page for Assignment with assignmentId
        /// returns NotFound if Assignment can not be found in Database;
        /// </summary>
        /// <param name="assignmentId">if from assignment for which details should be shown</param>
        /// <returns></returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Details(int assignmentId)
        {
            Assignment? assignment = _assignmentContainer.GetAssignmentById(assignmentId);
            if (assignment == null)
            {
                return NotFound();
            }
            List<Process> processList = await _processContainer.GetActiveProcessesAsync();
            Process? process = processList.FirstOrDefault(p => p.Assignments.Contains(assignment));

            AssignmentDetailsViewModel model = new AssignmentDetailsViewModel(assignment, process);
            return View("~/Views/Assignments/AssignmentDetails.cshtml", model);
        }

        /// <summary>
        /// Used for filtering Assignments in Index View
        /// </summary>
        /// <param name="selectedProcessId">Id of Process which Assignments should be Displayed</param>
        /// <returns>Index View</returns>
        [HttpPost]
        public IActionResult FilterAssignments(int selectedProcessId)
        {
            HttpContext.Session.SetInt32("selectedProcessId", selectedProcessId);
            return RedirectToAction("Index");
        }

        public IActionResult ChangeTabel(string currentList)
        {
            HttpContext.Session.SetString("currentList", currentList);
            return RedirectToAction("Index");
        }

        /// <summary>
        /// Used for sorting Assignments in IndexView
        /// Currently sorting by name and by DueDate is supported
        /// Returns to IndexView
        /// </summary>
        /// <param name="sortingMethod">string which represents Sorting Method</param>
        /// <returns></returns>
        [HttpPost]
        public IActionResult SortAssignments(string sortingMethod)
        {
            HttpContext.Session.SetString("sortingMethod", sortingMethod);
            return RedirectToAction("Index");
        }

        /// <summary>
        /// generates an AssignmentIndexViewModel
        /// is awaitable
        /// </summary>
        /// <returns>Task<AssignmentIndexViewModel></returns>
        private async Task<AssignmentIndexViewModel> GetAssignmentIndexViewModelAsync()
        {
            // get current User and Roles current user
            ApplicationUser user = await _userManager.GetUserAsync(HttpContext.User);
            List<string> roles = new List<string>(await _userManager.GetRolesAsync(user));

            List<Process> processList = await _processContainer.GetActiveProcessesAsync();
            // überprüfung einfügen ob Process noch nicht Archiviert ist.
            List<Assignment> assignmentList = new List<Assignment>();
            //changes contents of Lists depending on which list was selected in Index ViewModel

            processList = processList
                .Where(p =>
                    p.Assignments.Any(a =>
                        (
                            a.AssignedRole != null
                            && a.AssigneeType == AssigneeType.ROLES
                            && roles.Contains(a.AssignedRole.ToString())
                        )
                        || (p.Supervisor == user)
                        || (a.Assignee != null && a.Assignee.Id == user.Id)
                    )
                )
                .ToList();

            switch (HttpContext.Session.GetString("currentList"))
            {
                case "RoleAssignment":
                    //get Assignments form Processes in ProcessList with AssignedRole form current User
                    foreach (Process p in processList)
                    {
                        foreach (Assignment a in p.Assignments)
                        {
                            if (
                                a.AssignedRole != null
                                && a.AssigneeType == AssigneeType.ROLES
                                && roles.Contains(a.AssignedRole.ToString())
                            )
                                assignmentList.Add(a);
                        }
                    }
                    // assignmentList = _assignmentContainer
                    //     .GetAllAssignments()
                    //     .Where(a => a.AssignedRole != null && roles.Contains(a.AssignedRole.Name))
                    //     .ToList();
                    break;

                case "AllAssignments":
                    //if roles of current user contains Administrator show all Assignments
                    if (roles.Contains("Administrator"))
                    {
                        foreach (Process p in processList)
                        {
                            foreach (Assignment a in p.Assignments)
                            {
                                assignmentList.Add(a);
                                _logger.LogInformation(a.Title);
                            }
                        }
                    }
                    //if process contains current user as Supervisor add all Assignments form that process to AssignmentList, and all which match normally included Assignments
                    else if (processList.Any(p => p.Supervisor == user))
                    {
                        foreach (Process p in processList)
                        {
                            if (p.Supervisor == user)
                            {
                                foreach (Assignment a in p.Assignments)
                                {
                                    assignmentList.Add(a);
                                }
                                assignmentList = _context.Assignments.ToList();
                            }
                            else
                            {
                                foreach (Assignment a in p.Assignments)
                                {
                                    if (
                                        (a.Assignee != null && a.Assignee == user)
                                        || (
                                            a.AssignedRole != null
                                            && roles.Contains(a.AssignedRole.ToString())
                                        )
                                    )
                                        assignmentList.Add(a);
                                }
                            }
                        }
                        // assignmentList = _assignmentContainer
                        //     .GetAllAssignments()
                        //     .Where(a =>
                        //         (a.Assignee != null && a.Assignee == user)
                        //         || (
                        //             a.AssignedRole != null
                        //             && roles.Contains(a.AssignedRole.ToString())
                        //         )
                        //     )
                        //     .ToList();
                    }
                    else
                    {
                        foreach (Process p in processList)
                        {
                            foreach (Assignment a in p.Assignments)
                            {
                                if (a.Assignee != null && a.Assignee == user)
                                    assignmentList.Add(a);
                                else if (
                                    a.AssignedRole != null
                                    && roles.Contains(a.AssignedRole.ToString())
                                )
                                    assignmentList.Add(a);
                            }
                        }
                        // assignmentList = _assignmentContainer
                        //     .GetAllAssignments()
                        //     .Where(a => a.Assignee != null && a.Assignee == user)
                        //     .ToList();
                        HttpContext.Session.SetString("currentList", "MyAssignments");
                    }
                    break;
                default:
                    foreach (Process p in processList)
                    {
                        foreach (Assignment a in p.Assignments)
                        {
                            if (
                                a.AssigneeType == AssigneeType.USER
                                && a.Assignee != null
                                && a.Assignee == user
                            )
                                assignmentList.Add(a);
                            else
                                _logger.LogInformation(a.Title);
                        }
                    }
                    // assignmentList = _assignmentContainer
                    //     .GetAllAssignments()
                    //     .ToList()
                    //     .Where(a => a.Assignee != null && a.Assignee == user)
                    //     .ToList();
                    HttpContext.Session.SetString("currentList", "MyAssignments");
                    break;
            }
            AssignmentIndexViewModel model = new AssignmentIndexViewModel(
                assignmentList,
                processList
            );

            string? sortingMethod = HttpContext.Session.GetString("sortingMethod");
            if (sortingMethod != null)
            {
                model.SortAssingments(sortingMethod);
                _logger.LogCritical(sortingMethod);
            }

            int? selectedProcess = HttpContext.Session.GetInt32("selectedProcessId");
            if (selectedProcess.HasValue)
            {
                model.FilterAssignments(selectedProcess.Value);
            }

            return model;
        }
    }
}

//end codeownership Jan Pfluger
